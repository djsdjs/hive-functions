package tech.leovan.hive.udf.geo;

import com.google.common.base.Joiner;
import tech.leovan.hive.udf.utils.GeoUtils;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PolygonGeohashUDFTest {
    private final PolygonGeohashUDF udf = new PolygonGeohashUDF();

    @Test
    public void testPolygonGeohasherUDFTest01() throws Exception {
        List<Pair<Double, Double>> gcj02Points = Arrays.asList(
                new MutablePair<>(116.484893, 40.009019),
                new MutablePair<>(116.487253, 40.010399),
                new MutablePair<>(116.485998, 40.011455),
                new MutablePair<>(116.483702, 40.010124),
                new MutablePair<>(116.484893, 40.009019)
        );

        List<String> wgs84PolygonPoints = new ArrayList<>();
        for (Pair<Double, Double> gcj02Point : gcj02Points) {
            double[] wgs84LatLng = GeoUtils.GCJ02ToWGS84(gcj02Point.getRight(), gcj02Point.getLeft());
            wgs84PolygonPoints.add(String.format("%f %f", wgs84LatLng[1], wgs84LatLng[0]));
        }

        String polygonStr = "POLYGON ((" +  Joiner.on(", ").join(wgs84PolygonPoints) + "))";
        List<String> geohashes = udf.evaluate(polygonStr, 7);

        Assertions.assertEquals(7, geohashes.size());
    }

    @Test
    public void testPolygonGeohasherUDFTest02() throws Exception {
        String polygonStr = "POLYGON ((" +
                "115.41272345767285 38.80763134760505, " +
                "115.41271544593597 38.80763423767349, " +
                "115.41270954051669 38.80763936593079, " +
                "115.41270635942651 38.80765082117626, " +
                "115.41292182469752 38.809822218632895, " +
                "115.41292093884135 38.80983691809047, " +
                "115.41291867816747 38.80984500174097, " +
                "115.41291242138334 38.80985518864585, " +
                "115.41289815229631 38.809870586874844, " +
                "115.41289493239985 38.80988291022383, " +
                "115.41307718973837 38.81193905987919, " +
                "115.4130803888952 38.81194827295262, " +
                "115.4130856042712 38.811953559503785, " +
                "115.41309300572168 38.81195688574911, " +
                "115.41310510656606 38.811958116776, " +
                "115.41457270509173 38.811881322119085, " +
                "115.41870580759137 38.81149472649884, " +
                "115.41871742217755 38.81149176309211, " +
                "115.41872391686287 38.81148741448171, " +
                "115.41872779047836 38.811481452413474, " +
                "115.41872873797683 38.811471920268815, " +
                "115.4183663154671 38.80909510382193, " +
                "115.41811872916708 38.807500871162254, " +
                "115.41807399492406 38.80729286553331, " +
                "115.41806988440709 38.80728420746673, " +
                "115.41806438076834 38.80727942714416, " +
                "115.41805701255461 38.80727657096156, " +
                "115.41804525049653 38.80727581068264, " +
                "115.41419042228523 38.807597781313184, " +
                "115.41409727764317 38.80760214306976, " +
                "115.41272345767285 38.80763134760505" +
                "))";

        List<String> geohashes = udf.evaluate(polygonStr, 7);
        Assertions.assertEquals(22, geohashes.size());

        geohashes = udf.evaluate(polygonStr, 8);
        Assertions.assertEquals(450, geohashes.size());
    }

    @Test
    public void testPolygonGeohasherUDFTest03() throws Exception {
        String polygonStr = "MULTIPOLYGON (((" +
                "116.86872355257387 32.69111903922778, " +
                "116.86871499483283 32.69112598396492, " +
                "116.86871243876851 32.69113236604746, " +
                "116.86871289263844 32.691139093267466, " +
                "116.8687163759742 32.69114760403277, " +
                "116.86917256993152 32.69178684217686, " +
                "116.86952708317719 32.69226773591473, " +
                "116.86967962875286 32.69244812270408, " +
                "116.86969255537902 32.69245291120429, " +
                "116.86970598378804 32.692451767591336, " +
                "116.86973975732239 32.69244202558335, " +
                "116.8697670277251 32.69243060167831, " +
                "116.86977317621565 32.69242485577569, " +
                "116.86977652137595 32.69241804266224, " +
                "116.86977449748025 32.69240573703083, " +
                "116.86968960612569 32.69224731644057, " +
                "116.86959406085299 32.69208617837838, " +
                "116.86958426911899 32.69207685876524, " +
                "116.8695767782314 32.69207406029964, " +
                "116.86956859079177 32.69207391004275, " +
                "116.86955825595408 32.692077307800574, " +
                "116.86950467440805 32.692105288207536, " +
                "116.86949851144699 32.692106147435496, " +
                "116.86949035377836 32.69210483619398, " +
                "116.86948499348239 32.69210212474878, " +
                "116.86947830204326 32.692095763282204, " +
                "116.86936865783794 32.69194995063086, " +
                "116.86922961984679 32.691751081972335, " +
                "116.8692281798194 32.691740849320766, " +
                "116.86923262493882 32.69173228159588, " +
                "116.86927068471157 32.69170846776323, " +
                "116.86927870037229 32.69170104734556, " +
                "116.86928185624241 32.69169151923091, " +
                "116.86927685927233 32.69167777865335, " +
                "116.86896267511938 32.69127814723112, " +
                "116.86877588533007 32.69110709985264, " +
                "116.86876680483006 32.69110403794667, " +
                "116.86875799930327 32.69110442674425, " +
                "116.86872355257387 32.69111903922778" +
                ")), ((" +
                "116.86662071513655 32.69194279670074, " +
                "116.86661316611668 32.69194859674142, " +
                "116.86660952210026 32.691955290062616, " +
                "116.8666091835285 32.69196163238891, " +
                "116.86661151686474 32.69196766679284, " +
                "116.86665268183846 32.692031579203956, " +
                "116.86665900398518 32.692036522158624, " +
                "116.86666626262293 32.692039212994665, " +
                "116.86667803691154 32.692038578440346, " +
                "116.8670169414558 32.691866993264924, " +
                "116.86719848945849 32.69178484212635, " +
                "116.86720641906481 32.69177961320765, " +
                "116.8672106327955 32.69177416723887, " +
                "116.86721233651365 32.69176756353708, " +
                "116.86721098464835 32.6917609018827, " +
                "116.86720640825824 32.691754506691396, " +
                "116.86719036588602 32.691741450074595, " +
                "116.8671692018477 32.691711941108146, " +
                "116.86715819245254 32.691705864948, " +
                "116.86714578600333 32.6917057487258, " +
                "116.86662071513655 32.69194279670074" +
                ")))";

        List<String> geohashes = udf.evaluate(polygonStr, 7);
        Assertions.assertEquals(4, geohashes.size());
    }
}
